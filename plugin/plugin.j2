<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN>

<PLUGIN 
  name="{{ name }}"
  author="{{ author }}"
  version="{{ env['PLUGIN_VERSION'] }}"
  {% if launch is defined %}launch="{{ launch }}"{% endif %}
  pluginURL="https://raw.githubusercontent.com/{{ env['GITHUB_REPOSITORY'] }}/main/plugin/{{ name }}.plg"
  {% if support is defined %}support="{{ support }}"{% endif %}
  {% if min is defined %}min="{{ min }}"{% endif %}
  {% if max is defined %}max="{{ max }}"{% endif %}
  {% if icon is defined %}icon="{{ icon }}"{% endif %}
>

<CHANGES>
<![CDATA[
{{ env['PLUGIN_CHANGELOG'] }}

For older releases, see https://github.com/{{ env['GITHUB_REPOSITORY'] }}/releases
]]>
</CHANGES>

<!-- Check Unraid API compatibility -->
<FILE Run="/usr/bin/php">
<INLINE>
<![CDATA[
<?php
$min_api_version = '{{ min_api }}';

exec('unraid-api version --json', $output, $return_var);

// Check if the command was successful
if ($return_var !== 0) {
    echo "Failed to get Unraid API version\n";
    exit(1);
}

// Check if the output is valid JSON
$json = json_decode(implode("\n", $output), true);
if (!is_array($json) || !isset($json['version'])) {
    echo "Invalid JSON output\n";
    exit(1);
}

echo "Unraid API version: " . $json['version'] . "\n";

// If the version is less than the required one, fail the test
if (version_compare($json['version'], $min_api_version, '<')) {
    echo "Unraid API version is less than $min_api_version\n";
    exit(1);
}
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/{{ name }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz">
<URL>https://github.com/{{ env['GITHUB_REPOSITORY'] }}/releases/download/{{ env['PLUGIN_VERSION'] }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz</URL>
<SHA256>{{ env['PLUGIN_CHECKSUM'] }}</SHA256>
</FILE>

<!--
The 'install' script.
-->
<FILE Run="/bin/bash">
<INLINE>
<![CDATA[
if [ -f /etc/rc.d/rc.tsidp ]; then
  /etc/rc.d/rc.tsidp stop
fi

upgradepkg --install-new /boot/config/plugins/{{ name }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz

/etc/rc.d/rc.crond restart
/etc/rc.d/rc.tsidp start

# cleanup old versions
rm -f $(ls /boot/config/plugins/{{ name }}/{{ package_name }}-*.txz 2>/dev/null | grep -v '{{ env['PLUGIN_VERSION'] }}')

echo ""
echo "----------------------------------------------------"
echo " {{ name }} has been installed."
echo " Version: {{ env['PLUGIN_VERSION'] }}"
echo "----------------------------------------------------"
echo ""
]]>
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
<![CDATA[
removepkg {{ package_name }}

rm -rf /usr/local/emhttp/plugins/{{ name }}
rm -rf /boot/config/plugins/{{ name }}
]]>
</INLINE>
</FILE>

</PLUGIN>
