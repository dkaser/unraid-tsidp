<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN>

<PLUGIN 
  name="{{ name }}"
  author="{{ author }}"
  version="{{ env['PLUGIN_VERSION'] }}"
  {% if launch is defined %}launch="{{ launch }}"{% endif %}
  pluginURL="https://raw.githubusercontent.com/{{ env['GITHUB_REPOSITORY'] }}/main/plugin/{{ name }}.plg"
  {% if support is defined %}support="{{ support }}"{% endif %}
  {% if min is defined %}min="{{ min }}"{% endif %}
  {% if max is defined %}max="{{ max }}"{% endif %}
  {% if icon is defined %}icon="{{ icon }}"{% endif %}
>

<CHANGES>
<![CDATA[
{{ env['PLUGIN_CHANGELOG'] }}

For older releases, see https://github.com/{{ env['GITHUB_REPOSITORY'] }}/releases
]]>
</CHANGES>

<FILE Run="/usr/bin/php">
<INLINE>
<![CDATA[
<?php

function check_api() {
    // Check unraid-api compatibility
    $min_api_version = '{{ min_api }}';

    exec('unraid-api version --json', $output, $return_var);

    // Check if the command was successful
    if ($return_var !== 0) {
        return "- Unraid API version is less than $min_api_version. Please update to Unraid 7.2beta3 or later, or install the latest Unraid Connect plugin.\n";
    }

    // Check if the output is valid JSON
    $json = json_decode(implode("\n", $output), true);
    if (!is_array($json) || !isset($json['version'])) {
        return "- Invalid output from Unraid API version command.\n";
    }

    // If the version is less than the required one, fail the test
    if (version_compare($json['version'], $min_api_version, '<')) {
        return "- Unraid API version is less than $min_api_version. Please update to Unraid 7.2beta3 or later, or install the latest Unraid Connect plugin.\n";
    }
    return "";
}

function check_tailscale() {
    // Check if HTTPS is enabled for the tailnet via "tailscale status"
    exec('tailscale status -json', $output, $return_var);
    if ($return_var !== 0) {
        return "- Failed to execute 'tailscale status'. Please ensure Tailscale is installed and running.\n";
    }

    $json = json_decode(implode("\n", $output), true);
    if (!is_array($json)) {
        return "- Invalid JSON output from 'tailscale status'\n";
    }
    

    // Check to see if $json['CertDomains'] is an array and contains at least one entry
    if (!isset($json['CertDomains']) || !is_array($json['CertDomains']) || count($json['CertDomains']) === 0) {
        return "- HTTPS is not enabled for the tailnet. Please enable HTTPS in the Tailscale admin console: https://login.tailscale.com/admin/dns \n";
    }
    return "";
}

$problems = "";
$problems .= check_api();
$problems .= check_tailscale();
if ($problems !== "") {
    echo "The following issues were detected:\n";
    echo $problems;
    echo "\nPlease resolve these issues before installing this plugin.\n";
    exit(1);
}

]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/{{ name }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz">
<URL>https://github.com/{{ env['GITHUB_REPOSITORY'] }}/releases/download/{{ env['PLUGIN_VERSION'] }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz</URL>
<SHA256>{{ env['PLUGIN_CHECKSUM'] }}</SHA256>
</FILE>

<!--
The 'install' script.
-->
<FILE Run="/bin/bash">
<INLINE>
<![CDATA[
if [ -f /etc/rc.d/rc.tsidp ]; then
  /etc/rc.d/rc.tsidp stop
fi

upgradepkg --install-new /boot/config/plugins/{{ name }}/{{ package_name }}-{{ env['PLUGIN_VERSION'] }}-noarch-1.txz

/etc/rc.d/rc.crond restart
/etc/rc.d/rc.tsidp start

# cleanup old versions
rm -f $(ls /boot/config/plugins/{{ name }}/{{ package_name }}-*.txz 2>/dev/null | grep -v '{{ env['PLUGIN_VERSION'] }}')

echo ""
echo "****************************************************"
echo "* First Time Configuration Instructions            *"
echo "****************************************************"
echo ""
echo "If you have not already done so, follow these steps to add allowed users:"
echo ""
echo "1. Go to Settings -> Management Access -> Unraid API Settings."
echo "2. In the 'OIDC Providers' section, select 'Tailscale'."
echo "3. Expand 'Authorization Rules'."
echo "4. In 'Specific Email Addresses', add the Tailscale users that you want to allow access to the Unraid WebGUI."
echo "5. Click 'Apply' to save the changes."
echo ""
echo "****************************************************"
echo ""
echo "----------------------------------------------------"
echo " {{ name }} has been installed."
echo " Version: {{ env['PLUGIN_VERSION'] }}"
echo "----------------------------------------------------"
echo ""
]]>
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
<![CDATA[
removepkg {{ package_name }}

rm -rf /usr/local/emhttp/plugins/{{ name }}
rm -rf /boot/config/plugins/{{ name }}
]]>
</INLINE>
</FILE>

</PLUGIN>
